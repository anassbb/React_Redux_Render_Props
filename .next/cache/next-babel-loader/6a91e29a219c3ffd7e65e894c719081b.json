{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_ALL_SUCCESS, GET_ALL_FAILURE, PUT_SUCCESS, PUT_FAILURE } from '../actions/request';\nexport var REQUEST_STATUS = {\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error'\n};\n\nvar requestReducer = function requestReducer(state, action) {\n  debugger;\n\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records: action.records,\n          status: REQUEST_STATUS.SUCCESS\n        });\n      }\n\n    case GET_ALL_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          status: REQUEST_STATUS.ERROR,\n          error: action.error\n        });\n      }\n\n    case PUT_SUCCESS:\n      var records = state.records;\n      var record = action.record;\n      var recordIndex = records.map(function (rec) {\n        return rec.id;\n      }).indexOf(record.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: [].concat(_toConsumableArray(records.slice(0, recordIndex)), [record], _toConsumableArray(records.slice(recordIndex + 1)))\n      });\n\n    case PUT_FAILURE:\n      console.log('PUT_FAILURE: Currently just logging to console without refreshing records list');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default requestReducer;","map":{"version":3,"sources":["C:/Users/anasa/Desktop/work/React.js/desining React components/refon/src/reducers/request.js"],"names":["GET_ALL_SUCCESS","GET_ALL_FAILURE","PUT_SUCCESS","PUT_FAILURE","REQUEST_STATUS","LOADING","SUCCESS","ERROR","requestReducer","state","action","type","records","status","error","record","recordIndex","map","rec","id","indexOf","slice","console","log"],"mappings":";;;;;;;AAAA,SACEA,eADF,EAEEC,eAFF,EAGEC,WAHF,EAIEC,WAJF,QAKO,oBALP;AAOA,OAAO,IAAMC,cAAc,GAAG;AAC5BC,EAAAA,OAAO,EAAE,SADmB;AAE5BC,EAAAA,OAAO,EAAE,SAFmB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAvB;;AAMP,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACxC;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,eAAL;AAAsB;AACpB,+CACKS,KADL;AAEEG,UAAAA,OAAO,EAAEF,MAAM,CAACE,OAFlB;AAGEC,UAAAA,MAAM,EAAET,cAAc,CAACE;AAHzB;AAKD;;AACD,SAAKL,eAAL;AAAsB;AACpB,+CACKQ,KADL;AAEEI,UAAAA,MAAM,EAAET,cAAc,CAACG,KAFzB;AAGEO,UAAAA,KAAK,EAAEJ,MAAM,CAACI;AAHhB;AAKD;;AAED,SAAKZ,WAAL;AAAA,UACUU,OADV,GACsBH,KADtB,CACUG,OADV;AAAA,UAEUG,MAFV,GAEqBL,MAFrB,CAEUK,MAFV;AAGE,UAAMC,WAAW,GAAGJ,OAAO,CAACK,GAAR,CAAY,UAACC,GAAD;AAAA,eAASA,GAAG,CAACC,EAAb;AAAA,OAAZ,EAA6BC,OAA7B,CAAqCL,MAAM,CAACI,EAA5C,CAApB;AACA,6CACKV,KADL;AAEEG,QAAAA,OAAO,+BACFA,OAAO,CAACS,KAAR,CAAc,CAAd,EAAiBL,WAAjB,CADE,IAELD,MAFK,sBAGFH,OAAO,CAACS,KAAR,CAAcL,WAAW,GAAG,CAA5B,CAHE;AAFT;;AAQF,SAAKb,WAAL;AACEmB,MAAAA,OAAO,CAACC,GAAR,CACE,gFADF;AAGA,6CACKd,KADL;AAEEK,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAFhB;;AAKF;AACE,aAAOL,KAAP;AAtCJ;AAwCD,CA1CD;;AA4CA,eAAeD,cAAf","sourcesContent":["import {\r\n  GET_ALL_SUCCESS,\r\n  GET_ALL_FAILURE,\r\n  PUT_SUCCESS,\r\n  PUT_FAILURE,\r\n} from '../actions/request';\r\n\r\nexport const REQUEST_STATUS = {\r\n  LOADING: 'loading',\r\n  SUCCESS: 'success',\r\n  ERROR: 'error',\r\n};\r\n\r\nconst requestReducer = (state, action) => {\r\n  debugger;\r\n  switch (action.type) {\r\n    case GET_ALL_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        records: action.records,\r\n        status: REQUEST_STATUS.SUCCESS,\r\n      };\r\n    }\r\n    case GET_ALL_FAILURE: {\r\n      return {\r\n        ...state,\r\n        status: REQUEST_STATUS.ERROR,\r\n        error: action.error,\r\n      };\r\n    }\r\n\r\n    case PUT_SUCCESS:\r\n      const { records } = state;\r\n      const { record } = action;\r\n      const recordIndex = records.map((rec) => rec.id).indexOf(record.id);\r\n      return {\r\n        ...state,\r\n        records: [\r\n          ...records.slice(0, recordIndex),\r\n          record,\r\n          ...records.slice(recordIndex + 1),\r\n        ],\r\n      };\r\n    case PUT_FAILURE:\r\n      console.log(\r\n        'PUT_FAILURE: Currently just logging to console without refreshing records list',\r\n      );\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default requestReducer;\r\n"]},"metadata":{},"sourceType":"module"}